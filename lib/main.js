"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core = require("@actions/core");
const exec_1 = require("@actions/exec");
const inputs_1 = require("./inputs");
async function run() {
    core.debug(':: Loading input params');
    const inputs = new inputs_1.default();
    const accountUrl = `${inputs.AwsAccountID}.dkr.ecr.${inputs.Region}.amazonaws.com`;
    // Configure AWS CLI
    awsConfigure(inputs);
    // Login to AWS ECR
    await awsEcrLogin(inputs);
    // Build the Dockerfile image
    await buildImage(inputs, accountUrl);
    // Deploy built image tags to AWS ECR
    await deployToEcr(inputs, accountUrl);
}
function awsConfigure(inputs) {
    core.debug(':: Setting AWS credentials');
    core.exportVariable('AWS_ACCESS_KEY_ID', inputs.AccessKeyID);
    core.exportVariable('AWS_SECRET_ACCESS_KEY', inputs.SecretAccessKey);
    core.exportVariable('AWS_DEFAULT_REGION', inputs.Region);
}
async function awsEcrLogin(inputs) {
    core.info('== LOGIN INTO AWS ECR ==');
    let loginCmd = '';
    let err = '';
    let opts = {
        cwd: './',
        silent: true,
        listeners: {
            stdout: (data) => {
                loginCmd += data.toString();
            },
            stderr: (data) => {
                err += data.toString();
            }
        },
    };
    await exec_1.exec(`aws ecr get-login --no-include-email --region ${inputs.Region}`, undefined, opts);
    if (err.length > 0) {
        throw new Error('Failed to retrieve docker login to AWS ECR. Perhaps the AWS credentials do not have the correct permission');
    }
    await exec_1.exec(loginCmd, undefined, opts);
    core.info('== FINISHED LOGIN ==');
}
function getEcrTags(accountUrl, repoName, inputTags) {
    let tags = inputTags.split(',');
    const ecrTags = [];
    // Default to Github Repository name
    if (repoName.length === 0) {
        repoName = (process.env.GITHUB_REPOSITORY || '').toLocaleLowerCase();
    }
    // Add the ref tag if code is a checked out release tag
    if ((process.env.GITHUB_REF || '').startsWith('refs/tags')) {
        const tag = (process.env.GITHUB_REF || '').split('/').pop();
        if (tag !== '' || tag !== undefined) {
            ecrTags.push(`${accountUrl}/${repoName}:${tag}`);
        }
    }
    // Build the tags
    for (const tag of tags) {
        ecrTags.push(`${accountUrl}/${repoName}:${tag}`);
    }
    return ecrTags;
}
async function buildImage(inputs, accountUrl) {
    core.info('== BUILD IMAGE FROM DOCKERFILE ==');
    const ecrTags = getEcrTags(accountUrl, inputs.EcrRepoName, inputs.EcrTags);
    let tags = ecrTags.join(' -t ');
    if (tags.length > 0) {
        tags = `-t ${tags}`;
    }
    await exec_1.exec(`docker build ${inputs.DockerBuildArgs} -f ${inputs.DockerfilePath} ${tags} .`, undefined, {
        cwd: inputs.ProjectPath,
    });
    core.info('== FINISHED BUILDING IMAGE ==');
}
async function deployToEcr(inputs, accountUrl) {
    core.info('== DEPLOYING TO ECR ==');
    core.debug(`:: ECR Account URL: ${accountUrl}`);
    const ecrTags = getEcrTags(accountUrl, inputs.EcrRepoName, inputs.EcrTags);
    for (const tag of ecrTags) {
        await exec_1.exec(`docker push ${tag}`);
    }
    core.info('== FINISHED DEPLOYMENT ==');
}
try {
    run();
    // Always fail so we can just rerun
    core.setFailed('OOPS');
}
catch (error) {
    console.log(error);
    core.setFailed(error.message);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQXNDO0FBQ3RDLHdDQUFxQztBQUVyQyxxQ0FBOEI7QUFFOUIsS0FBSyxVQUFVLEdBQUc7SUFDaEIsSUFBSSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sTUFBTSxHQUFHLElBQUksZ0JBQU0sRUFBRSxDQUFDO0lBRTVCLE1BQU0sVUFBVSxHQUFHLEdBQUcsTUFBTSxDQUFDLFlBQVksWUFBWSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsQ0FBQztJQUVuRixvQkFBb0I7SUFDcEIsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXJCLG1CQUFtQjtJQUNuQixNQUFNLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUUxQiw2QkFBNkI7SUFDN0IsTUFBTSxVQUFVLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRXJDLHFDQUFxQztJQUNyQyxNQUFNLFdBQVcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLE1BQWM7SUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFBO0lBQ3hDLElBQUksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzdELElBQUksQ0FBQyxjQUFjLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3JFLElBQUksQ0FBQyxjQUFjLENBQUMsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxLQUFLLFVBQVUsV0FBVyxDQUFDLE1BQWM7SUFDdkMsSUFBSSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO0lBRXJDLElBQUksUUFBUSxHQUFH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QixDQUFDLENBQUM7SUFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELEtBQUssVUFBVSxXQUFXLENBQUMsTUFBYyxFQUFFLFVBQWtCO0lBQzNELElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUVwQyxJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBRWhELE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFM0UsS0FBSyxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUU7UUFDekIsTUFBTSxXQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQ2xDO0lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFRCxJQUFJO0lBQ0YsR0FBRyxFQUFFLENBQUM7SUFDTixtQ0FBbUM7SUFDbkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN4QjtBQUFDLE9BQU8sS0FBSyxFQUFFO0lBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUMvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvcmUgZnJvbSAnQGFjdGlvbnMvY29yZSc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAnQGFjdGlvbnMvZXhlYyc7XG5pbXBvcnQgeyBFeGVjT3B0aW9ucyB9IGZyb20gJ0BhY3Rpb25zL2V4ZWMvbGliL2ludGVyZmFjZXMnO1xuaW1wb3J0IElucHV0cyBmcm9tICcuL2lucHV0cyc7XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bigpIHtcbiAgY29yZS5kZWJ1ZygnOjogTG9hZGluZyBpbnB1dCBwYXJhbXMnKTtcbiAgY29uc3QgaW5wdXRzID0gbmV3IElucHV0cygpO1xuXG4gIGNvbnN0IGFjY291bnRVcmwgPSBgJHtpbnB1dHMuQXdzQWNjb3VudElEfS5ka3IuZWNyLiR7aW5wdXRzLlJlZ2lvbn0uYW1hem9uYXdzLmNvbWA7XG5cbiAgLy8gQ29uZmlndXJlIEFXUyBDTElcbiAgYXdzQ29uZmlndXJlKGlucHV0cyk7XG5cbiAgLy8gTG9naW4gdG8gQVdTIEVDUlxuICBhd2FpdCBhd3NFY3JMb2dpbihpbnB1dHMpO1xuXG4gIC8vIEJ1aWxkIHRoZSBEb2NrZXJmaWxlIGltYWdlXG4gIGF3YWl0IGJ1aWxkSW1hZ2UoaW5wdXRzLCBhY2NvdW50VXJsKTtcblxuICAvLyBEZXBsb3kgYnVpbHQgaW1hZ2UgdGFncyB0byBBV1MgRUNSXG4gIGF3YWl0IGRlcGxveVRvRWNyKGlucHV0cywgYWNjb3VudFVybCk7XG59XG5cbmZ1bmN0aW9uIGF3c0NvbmZpZ3VyZShpbnB1dHM6IElucHV0cykge1xuICBjb3JlLmRlYnVnKCc6OiBTZXR0aW5nIEFXUyBjcmVkZW50aWFscycpXG4gIGNvcmUuZXhwb3J0VmFyaWFibGUoJ0FXU19BQ0NFU1NfS0VZX0lEJywgaW5wdXRzLkFjY2Vzc0tleUlEKTtcbiAgY29yZS5leHBvcnRWYXJpYWJsZSgnQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZJywgaW5wdXRzLlNlY3JldEFjY2Vzc0tleSk7XG4gIGNvcmUuZXhwb3J0VmFyaWFibGUoJ0FXU19ERUZBVUxUX1JFR0lPTicsIGlucHV0cy5SZWdpb24pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBhd3NFY3JMb2dpbihpbnB1dHM6IElucHV0cykge1xuICBjb3JlLmluZm8oJz09IExPR0lOIElOVE8gQVdTIEVDUiA9PScpXG5cbiAgbGV0IGxvZ2luQ21kID0gJyc7XG4gIGxldCBlcnIgPSAnJztcblxuICBsZXQgb3B0czogRXhlY09wdGlvbnMgPSB7XG4gICAgY3dkOiAnLi8nLFxuICAgIHNpbGVudDogdHJ1ZSxcbiAgICBsaXN0ZW5lcnM6IHtcbiAgICAgIHN0ZG91dDogKGRhdGE6IEJ1ZmZlcikgPT4ge1xuICAgICAgICBsb2dpbkNtZCArPSBkYXRhLnRvU3RyaW5nKCk7XG4gICAgICB9LFxuICAgICAgc3RkZXJyOiAoZGF0YTogQnVmZmVyKSA9PiB7XG4gICAgICAgIGVyciArPSBkYXRhLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfVxuXG4gIGF3YWl0IGV4ZWMoYGF3cyBlY3IgZ2V0LWxvZ2luIC0tbm8taW5jbHVkZS1lbWFpbCAtLXJlZ2lvbiAke2lucHV0cy5SZWdpb259YCwgdW5kZWZpbmVkLCBvcHRzKTtcbiAgaWYgKGVyci5sZW5ndGggPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcmV0cmlldmUgZG9ja2VyIGxvZ2luIHRvIEFXUyBFQ1IuIFBlcmhhcHMgdGhlIEFXUyBjcmVkZW50aWFscyBkbyBub3QgaGF2ZSB0aGUgY29ycmVjdCBwZXJtaXNzaW9uJyk7XG4gIH1cblxuICBhd2FpdCBleGVjKGxvZ2luQ21kLCB1bmRlZmluZWQsIG9wdHMpO1xuXG4gIGNvcmUuaW5mbygnPT0gRklOSVNIRUQgTE9HSU4gPT0nKTtcbn1cblxuZnVuY3Rpb24gZ2V0RWNyVGFncyhhY2NvdW50VXJsOiBzdHJpbmcsIHJlcG9OYW1lOiBzdHJpbmcsIGlucHV0VGFnczogc3RyaW5nKTogc3RyaW5nW10ge1xuICBsZXQgdGFncyA9IGlucHV0VGFncy5zcGxpdCgnLCcpO1xuICBjb25zdCBlY3JUYWdzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIC8vIERlZmF1bHQgdG8gR2l0aHViIFJlcG9zaXRvcnkgbmFtZVxuICBpZiAocmVwb05hbWUubGVuZ3RoID09PSAwKSB7XG4gICAgcmVwb05hbWUgPSAocHJvY2Vzcy5lbnYuR0lUSFVCX1JFUE9TSVRPUlkgfHwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gIH1cblxuICAvLyBBZGQgdGhlIHJlZiB0YWcgaWYgY29kZSBpcyBhIGNoZWNrZWQgb3V0IHJlbGVhc2UgdGFnXG4gIGlmICgocHJvY2Vzcy5lbnYuR0lUSFVCX1JFRiB8fCAnJykuc3RhcnRzV2l0aCgncmVmcy90YWdzJykpIHtcbiAgICBjb25zdCB0YWcgPSAocHJvY2Vzcy5lbnYuR0lUSFVCX1JFRiB8fCAnJykuc3BsaXQoJy8nKS5wb3AoKTtcblxuICAgIGlmICh0YWcgIT09ICcnIHx8IHRhZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBlY3JUYWdzLnB1c2goYCR7YWNjb3VudFVybH0vJHtyZXBvTmFtZX06JHt0YWd9YCk7XG4gICAgfVxuICB9XG5cbiAgLy8gQnVpbGQgdGhlIHRhZ3NcbiAgZm9yIChjb25zdCB0YWcgb2YgdGFncykge1xuICAgIGVjclRhZ3MucHVzaChgJHthY2NvdW50VXJsfS8ke3JlcG9OYW1lfToke3RhZ31gKTtcbiAgfVxuXG4gIHJldHVybiBlY3JUYWdzXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkSW1hZ2UoaW5wdXRzOiBJbnB1dHMsIGFjY291bnRVcmw6IHN0cmluZykge1xuICBjb3JlLmluZm8oJz09IEJVSUxEIElNQUdFIEZST00gRE9DS0VSRklMRSA9PScpO1xuICBjb25zdCBlY3JUYWdzID0gZ2V0RWNyVGFncyhhY2NvdW50VXJsLCBpbnB1dHMuRWNyUmVwb05hbWUsIGlucHV0cy5FY3JUYWdzKTtcblxuICBsZXQgdGFncyA9IGVjclRhZ3Muam9pbignIC10ICcpO1xuXG4gIGlmICh0YWdzLmxlbmd0aCA+IDApIHtcbiAgICB0YWdzID0gYC10ICR7dGFnc31gXG4gIH1cblxuXG4gIGF3YWl0IGV4ZWMoYGRvY2tlciBidWlsZCAke2lucHV0cy5Eb2NrZXJCdWlsZEFyZ3N9IC1mICR7aW5wdXRzLkRvY2tlcmZpbGVQYXRofSAke3RhZ3N9IC5gLCB1bmRlZmluZWQsIHtcbiAgICBjd2Q6IGlucHV0cy5Qcm9qZWN0UGF0aCxcbiAgfSk7XG4gIGNvcmUuaW5mbygnPT0gRklOSVNIRUQgQlVJTERJTkcgSU1BR0UgPT0nKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZGVwbG95VG9FY3IoaW5wdXRzOiBJbnB1dHMsIGFjY291bnRVcmw6IHN0cmluZykge1xuICBjb3JlLmluZm8oJz09IERFUExPWUlORyBUTyBFQ1IgPT0nKTtcblxuICBjb3JlLmRlYnVnKGA6OiBFQ1IgQWNjb3VudCBVUkw6ICR7YWNjb3VudFVybH1gKTtcblxuICBjb25zdCBlY3JUYWdzID0gZ2V0RWNyVGFncyhhY2NvdW50VXJsLCBpbnB1dHMuRWNyUmVwb05hbWUsIGlucHV0cy5FY3JUYWdzKTtcblxuICBmb3IgKGNvbnN0IHRhZyBvZiBlY3JUYWdzKSB7XG4gICAgYXdhaXQgZXhlYyhgZG9ja2VyIHB1c2ggJHt0YWd9YCk7XG4gIH1cblxuICBjb3JlLmluZm8oJz09IEZJTklTSEVEIERFUExPWU1FTlQgPT0nKTtcbn1cblxudHJ5IHtcbiAgcnVuKCk7XG4gIC8vIEFsd2F5cyBmYWlsIHNvIHdlIGNhbiBqdXN0IHJlcnVuXG4gIGNvcmUuc2V0RmFpbGVkKCdPT1BTJyk7XG59IGNhdGNoIChlcnJvcikge1xuICBjb25zb2xlLmxvZyhlcnJvcik7XG4gIGNvcmUuc2V0RmFpbGVkKGVycm9yLm1lc3NhZ2UpO1xufSJdfQ==